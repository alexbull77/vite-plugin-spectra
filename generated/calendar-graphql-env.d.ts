/* eslint-disable */
/* prettier-ignore */

export type introspection_types = {
    'Boolean': unknown;
    'Int': unknown;
    'String': unknown;
    'String_comparison_exp': { kind: 'INPUT_OBJECT'; name: 'String_comparison_exp'; isOneOf: false; inputFields: [{ name: '_eq'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_gt'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_gte'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_ilike'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_in'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'String'; ofType: null; }; }; }; defaultValue: null }, { name: '_iregex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_is_null'; type: { kind: 'SCALAR'; name: 'Boolean'; ofType: null; }; defaultValue: null }, { name: '_like'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_lt'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_lte'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_neq'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nilike'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nin'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'String'; ofType: null; }; }; }; defaultValue: null }, { name: '_niregex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nlike'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nregex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_nsimilar'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_regex'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }, { name: '_similar'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'cursor_ordering': { name: 'cursor_ordering'; enumValues: 'ASC' | 'DESC'; };
    'mutation_root': { kind: 'OBJECT'; name: 'mutation_root'; fields: { 'delete_test': { name: 'delete_test'; type: { kind: 'OBJECT'; name: 'test_mutation_response'; ofType: null; } }; 'delete_test_by_pk': { name: 'delete_test_by_pk'; type: { kind: 'OBJECT'; name: 'test'; ofType: null; } }; 'insert_test': { name: 'insert_test'; type: { kind: 'OBJECT'; name: 'test_mutation_response'; ofType: null; } }; 'insert_test_one': { name: 'insert_test_one'; type: { kind: 'OBJECT'; name: 'test'; ofType: null; } }; 'update_test': { name: 'update_test'; type: { kind: 'OBJECT'; name: 'test_mutation_response'; ofType: null; } }; 'update_test_by_pk': { name: 'update_test_by_pk'; type: { kind: 'OBJECT'; name: 'test'; ofType: null; } }; 'update_test_many': { name: 'update_test_many'; type: { kind: 'LIST'; name: never; ofType: { kind: 'OBJECT'; name: 'test_mutation_response'; ofType: null; }; } }; }; };
    'order_by': { name: 'order_by'; enumValues: 'asc' | 'asc_nulls_first' | 'asc_nulls_last' | 'desc' | 'desc_nulls_first' | 'desc_nulls_last'; };
    'query_root': { kind: 'OBJECT'; name: 'query_root'; fields: { 'test': { name: 'test'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'test'; ofType: null; }; }; }; } }; 'test_aggregate': { name: 'test_aggregate'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'test_aggregate'; ofType: null; }; } }; 'test_by_pk': { name: 'test_by_pk'; type: { kind: 'OBJECT'; name: 'test'; ofType: null; } }; }; };
    'subscription_root': { kind: 'OBJECT'; name: 'subscription_root'; fields: { 'test': { name: 'test'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'test'; ofType: null; }; }; }; } }; 'test_aggregate': { name: 'test_aggregate'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'test_aggregate'; ofType: null; }; } }; 'test_by_pk': { name: 'test_by_pk'; type: { kind: 'OBJECT'; name: 'test'; ofType: null; } }; 'test_stream': { name: 'test_stream'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'test'; ofType: null; }; }; }; } }; }; };
    'test': { kind: 'OBJECT'; name: 'test'; fields: { 'id': { name: 'id'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; } }; 'name': { name: 'name'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'String'; ofType: null; }; } }; }; };
    'test_aggregate': { kind: 'OBJECT'; name: 'test_aggregate'; fields: { 'aggregate': { name: 'aggregate'; type: { kind: 'OBJECT'; name: 'test_aggregate_fields'; ofType: null; } }; 'nodes': { name: 'nodes'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'test'; ofType: null; }; }; }; } }; }; };
    'test_aggregate_fields': { kind: 'OBJECT'; name: 'test_aggregate_fields'; fields: { 'count': { name: 'count'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; } }; 'max': { name: 'max'; type: { kind: 'OBJECT'; name: 'test_max_fields'; ofType: null; } }; 'min': { name: 'min'; type: { kind: 'OBJECT'; name: 'test_min_fields'; ofType: null; } }; }; };
    'test_bool_exp': { kind: 'INPUT_OBJECT'; name: 'test_bool_exp'; isOneOf: false; inputFields: [{ name: '_and'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'test_bool_exp'; ofType: null; }; }; }; defaultValue: null }, { name: '_not'; type: { kind: 'INPUT_OBJECT'; name: 'test_bool_exp'; ofType: null; }; defaultValue: null }, { name: '_or'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'test_bool_exp'; ofType: null; }; }; }; defaultValue: null }, { name: 'id'; type: { kind: 'INPUT_OBJECT'; name: 'uuid_comparison_exp'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'INPUT_OBJECT'; name: 'String_comparison_exp'; ofType: null; }; defaultValue: null }]; };
    'test_constraint': { name: 'test_constraint'; enumValues: 'test_pkey'; };
    'test_insert_input': { kind: 'INPUT_OBJECT'; name: 'test_insert_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'test_max_fields': { kind: 'OBJECT'; name: 'test_max_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; } }; 'name': { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; } }; }; };
    'test_min_fields': { kind: 'OBJECT'; name: 'test_min_fields'; fields: { 'id': { name: 'id'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; } }; 'name': { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; } }; }; };
    'test_mutation_response': { kind: 'OBJECT'; name: 'test_mutation_response'; fields: { 'affected_rows': { name: 'affected_rows'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'Int'; ofType: null; }; } }; 'returning': { name: 'returning'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'OBJECT'; name: 'test'; ofType: null; }; }; }; } }; }; };
    'test_on_conflict': { kind: 'INPUT_OBJECT'; name: 'test_on_conflict'; isOneOf: false; inputFields: [{ name: 'constraint'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'ENUM'; name: 'test_constraint'; ofType: null; }; }; defaultValue: null }, { name: 'update_columns'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'ENUM'; name: 'test_update_column'; ofType: null; }; }; }; }; defaultValue: "[]" }, { name: 'where'; type: { kind: 'INPUT_OBJECT'; name: 'test_bool_exp'; ofType: null; }; defaultValue: null }]; };
    'test_order_by': { kind: 'INPUT_OBJECT'; name: 'test_order_by'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'ENUM'; name: 'order_by'; ofType: null; }; defaultValue: null }]; };
    'test_pk_columns_input': { kind: 'INPUT_OBJECT'; name: 'test_pk_columns_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; }; defaultValue: null }]; };
    'test_select_column': { name: 'test_select_column'; enumValues: 'id' | 'name'; };
    'test_set_input': { kind: 'INPUT_OBJECT'; name: 'test_set_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'test_stream_cursor_input': { kind: 'INPUT_OBJECT'; name: 'test_stream_cursor_input'; isOneOf: false; inputFields: [{ name: 'initial_value'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'test_stream_cursor_value_input'; ofType: null; }; }; defaultValue: null }, { name: 'ordering'; type: { kind: 'ENUM'; name: 'cursor_ordering'; ofType: null; }; defaultValue: null }]; };
    'test_stream_cursor_value_input': { kind: 'INPUT_OBJECT'; name: 'test_stream_cursor_value_input'; isOneOf: false; inputFields: [{ name: 'id'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: 'name'; type: { kind: 'SCALAR'; name: 'String'; ofType: null; }; defaultValue: null }]; };
    'test_update_column': { name: 'test_update_column'; enumValues: 'id' | 'name'; };
    'test_updates': { kind: 'INPUT_OBJECT'; name: 'test_updates'; isOneOf: false; inputFields: [{ name: '_set'; type: { kind: 'INPUT_OBJECT'; name: 'test_set_input'; ofType: null; }; defaultValue: null }, { name: 'where'; type: { kind: 'NON_NULL'; name: never; ofType: { kind: 'INPUT_OBJECT'; name: 'test_bool_exp'; ofType: null; }; }; defaultValue: null }]; };
    'uuid': unknown;
    'uuid_comparison_exp': { kind: 'INPUT_OBJECT'; name: 'uuid_comparison_exp'; isOneOf: false; inputFields: [{ name: '_eq'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: '_gt'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: '_gte'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: '_in'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; }; }; defaultValue: null }, { name: '_is_null'; type: { kind: 'SCALAR'; name: 'Boolean'; ofType: null; }; defaultValue: null }, { name: '_lt'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: '_lte'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: '_neq'; type: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; defaultValue: null }, { name: '_nin'; type: { kind: 'LIST'; name: never; ofType: { kind: 'NON_NULL'; name: never; ofType: { kind: 'SCALAR'; name: 'uuid'; ofType: null; }; }; }; defaultValue: null }]; };
};

/** An IntrospectionQuery representation of your schema.
 *
 * @remarks
 * This is an introspection of your schema saved as a file by GraphQLSP.
 * It will automatically be used by `gql.tada` to infer the types of your GraphQL documents.
 * If you need to reuse this data or update your `scalars`, update `tadaOutputLocation` to
 * instead save to a .ts instead of a .d.ts file.
 */
export type introspection = {
  name: 'calendar';
  query: 'query_root';
  mutation: 'mutation_root';
  subscription: 'subscription_root';
  types: introspection_types;
};

import * as gqlTada from 'gql.tada';
